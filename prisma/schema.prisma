// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id                   String              @id @default(uuid())
  email                String              @unique
  motdepasse           String
  nomComplete          String
  gsm                  String?
  fixe                 String?
  adresse              String?
  verifier             Boolean             @default(false)
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  moyenneDeTrasnport   MoyenneDeTransport? @relation(fields: [idMoyenneDeTransport], references: [id])
  idMoyenneDeTransport String?

  voyagesPassager     Voyage[]           @relation("passager")
  voyagesProprietaire Voyage[]           @relation("proprietaire")
  ChoixRole           ChoixRole[]
  VerificationEmail   VerificationEmail?
}

model MoyenneDeTransport {
  id             String  @id @default(uuid())
  icon           String?
  nom            String
  isCalculable   Boolean @default(false)
  cout_par_metre Float?
  description    String?

  Voyages Voyage[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Utilisateur Utilisateur[]
}

model Image {
  id        String   @id @default(uuid())
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ChoixImagePlace ChoixImagePlace[]
}

model ChoixImagePlace {
  place   Place  @relation(fields: [idPlace], references: [id])
  idPlace String

  image   Image  @relation(fields: [idImage], references: [id])
  idImage String

  @@id([idPlace, idImage])
}

model Place {
  id          String   @id @default(uuid())
  nom         String
  latitude    Float
  longtitude  Float
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  voyage_placeDepart  Voyage[] @relation("placeDepart")
  voyage_placeArrivee Voyage[] @relation("placeArrivee")

  ChoixImagePlace ChoixImagePlace[]
}

model Voyage {
  id         String   @id @default(uuid())
  dateVoyage DateTime
  statut     String

  passager   Utilisateur @relation("passager", fields: [idPassager], references: [id])
  idPassager String

  proprietaire   Utilisateur @relation("proprietaire", fields: [idProprietaire], references: [id])
  idProprietaire String

  moyenneDeTransport   MoyenneDeTransport @relation(fields: [idMoyenneDeTransport], references: [id])
  idMoyenneDeTransport String

  placeDepart   Place  @relation("placeDepart", fields: [idPlaceDepart], references: [id])
  idPlaceDepart String

  placeArrivee   Place  @relation("placeArrivee", fields: [idPlaceArrivee], references: [id])
  idPlaceArrivee String
}

model Role {
  libelle   String      @id
  ChoixRole ChoixRole[]
}

model ChoixRole {
  Utilisateur   Utilisateur @relation(fields: [idUtilisateur], references: [id])
  idUtilisateur String
  Role          Role        @relation(fields: [role], references: [libelle])
  role          String

  @@id([idUtilisateur, role])
}

model VerificationEmail {
  Utilisateur   Utilisateur @relation(fields: [idUtilisateur], references: [id])
  idUtilisateur String      @unique

  token          String
  dateExpiration DateTime

  @@id([token, idUtilisateur])
}
